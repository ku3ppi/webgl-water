@startuml WebGL Water Data Flow
!theme plain
skinparam backgroundColor #FFFFFF
skinparam defaultFontColor #000000

title WebGL Water Tutorial - Data Flow Activity Diagram

|Browser Frontend|
start
:User loads page;
:Initialize WebGL context;
:Load shaders from /shaders/;
:Compile shader programs;
:Load textures from /assets/;
:Load meshes from /api/meshes;
:Create GPU buffers;
:Setup framebuffers;

|Go Backend|
:HTTP server starts;
:Initialize asset manager;
:Generate water/terrain meshes;
:Start state update ticker (60fps);
:Start WebSocket handler;

|Browser Frontend|
:Connect WebSocket;
:Start render loop;

repeat
  |Browser Frontend|
  :Update local clock;
  :Handle user input (mouse/keyboard);

  if (User interaction?) then (yes)
    :Send camera update to /api/state/camera;
    :Send water property update to /api/state/water;
    |Go Backend|
    :Update camera state;
    :Update water properties;
    :Broadcast via WebSocket;
    |Browser Frontend|
    :Receive WebSocket update;
  else (no)
  endif

  :Clear framebuffers;

  note right
    **Refraction Pass**
    Render scene below water
  end note
  :Bind refraction framebuffer;
  :Set clipping plane [0,-1,0,0];
  :Render terrain with stone texture;

  note right
    **Reflection Pass**
    Render scene above water (mirrored)
  end note
  :Bind reflection framebuffer;
  :Set clipping plane [0,1,0,0];
  :Mirror view matrix;
  :Render terrain;

  note right
    **Main Scene Pass**
    Final water rendering
  end note
  :Bind main framebuffer;
  :Use water shader program;
  :Bind water plane mesh;
  :Set transformation matrices;
  :Bind reflection texture → TEXTURE1;
  :Bind refraction texture → TEXTURE0;
  :Bind dudv texture → TEXTURE2;
  :Bind normal map → TEXTURE3;
  :Calculate dudv animation offset;
  :Set water uniforms (reflectivity, fresnel);
  :Draw water triangles;
  :Render terrain (no clipping);
  :Present to screen;

  |Go Backend|
  :Update application clock;
  :Broadcast state to WebSocket clients;

repeat while (Application running?)

|Browser Frontend|
:Cleanup WebGL resources;
:Close WebSocket connection;
stop

note left
  **Key Data Structures:**
  - Mesh: vertices, normals, texCoords, indices
  - Texture: WebGL texture objects + metadata
  - Shader Program: compiled vertex + fragment shaders
  - Framebuffer: color texture + depth texture
  - State: camera, water properties, clock, scenery flags
  - WebSocket Messages: real-time state synchronization
end note

@enduml
