@startuml Go Backend Code Map
!theme plain

title WebGL Water - Go Backend Code-Karte

package "Server Package" {

  class Server {
    **Felder:**
    - router: *mux.Router
    - assets: *Assets
    - appState: *State
    - upgrader: websocket.Upgrader
    - clients: map[*websocket.Conn]bool
    - staticPath: string
    - port: int

    **HTTP Handler:**
    + handleIndex()
    + handleAssetFile()
    + handleShader()
    + handleGetMeshes()
    + handleGetMesh()
    + handleGetState()
    + handleUpdateWater()
    + handleUpdateCamera()
    + handleWebSocket()

    **Management:**
    + NewServer(): *Server
    + Start(): error
    + setupRoutes()
    + startStateUpdates()
  }

  class Assets {
    **Daten:**
    - meshes: map[string]*Mesh
    - textures: map[string]*Texture
    - basePath: string

    **Methoden:**
    + Initialize(): error
    + GetMesh(name): (*Mesh, error)
    + ListMeshes(): []string
    + CreateWaterMesh(size, segments): *Mesh
    + CreateTerrainMesh(size, segments, height): *Mesh
  }

  class Mesh {
    + Name: string
    + Vertices: []float32
    + Normals: []float32
    + TexCoords: []float32
    + Indices: []uint16
    + VertexCount: int
    + TriangleCount: int
  }

}

package "State Package" {

  class State {
    **Felder:**
    - mu: sync.RWMutex
    - clock: float32
    - camera: *Camera
    - water: *Water
    - mouse: *Mouse
    - scenery: bool

    **Methoden:**
    + Update(msg: Message)
    + GetClock(): float32
    + GetCamera(): Camera
    + GetWater(): Water
  }

  class Camera {
    **Position:**
    - position: Vec3
    - target: Vec3
    - distance: float32
    - yaw: float32
    - pitch: float32

    **Grenzen:**
    - minDistance: float32 = 5.0
    - maxDistance: float32 = 150.0
    - minPitch: float32 = -1.5
    - maxPitch: float32 = 1.5

    **Steuerung:**
    + OrbitLeftRight(delta)
    + OrbitUpDown(delta)
    + Zoom(delta)
    + GetViewMatrix(): Mat4
  }

  class Water {
    + Reflectivity: float32 = 0.6
    + FresnelStrength: float32 = 2.0
    + WaveSpeed: float32 = 0.03
    + UseReflection: bool = true
    + UseRefraction: bool = true
    + GetDudvOffset(time): float32
  }

}

package "HTTP Strukturen" {

  class WaterUpdateRequest {
    + reflectivity: *float32
    + fresnelStrength: *float32
    + waveSpeed: *float32
    + useReflection: *bool
    + useRefraction: *bool
  }

  class CameraUpdateRequest {
    + mouseDown: *{X, Y: int32}
    + mouseUp: *bool
    + mouseMove: *{X, Y: int32}
    + zoom: *float32
  }

}

Server --> Assets
Server --> State
State --> Camera
State --> Water

note right of Server
**HTTP Routen:**
/static/* - Statische Dateien
/assets/{filename} - Texturen
/shaders/{name} - GLSL Dateien
/api/meshes - Mesh Liste
/api/state - Aktueller Status
/ws - WebSocket Updates (60fps)
end note

note bottom of Assets
**Generierte Meshes:**
water_plane: 20x20 units, 64x64 segments
terrain: 50x50 units, 32x32 segments
end note

@enduml
