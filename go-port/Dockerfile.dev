# Development Dockerfile with hot reload for WebGL Water Tutorial Go Port

FROM golang:1.22-alpine

# Install development dependencies
RUN apk add --no-cache git ca-certificates tzdata curl wget

# Install air for hot reload
RUN go install github.com/cosmtrek/air@v1.49.0

# Set working directory
WORKDIR /app

# Create non-root user for development
RUN adduser -D -s /bin/sh developer && \
    chown -R developer:developer /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code (will be overridden by volume mount in docker-compose)
COPY . .

# Create air configuration
RUN cat > .air.toml << 'EOF'
root = "."
testdata_dir = "testdata"
tmp_dir = "tmp"

[build]
  args_bin = []
  bin = "./tmp/main"
  cmd = "go build -o ./tmp/main ./cmd/server"
  delay = 1000
  exclude_dir = ["assets", "tmp", "vendor", "testdata", "web/static"]
  exclude_file = []
  exclude_regex = ["_test.go"]
  exclude_unchanged = false
  follow_symlink = false
  full_bin = ""
  include_dir = []
  include_ext = ["go", "tpl", "tmpl", "html"]
  kill_delay = "0s"
  log = "build-errors.log"
  send_interrupt = false
  stop_on_root = false

[color]
  app = ""
  build = "yellow"
  main = "magenta"
  runner = "green"
  watcher = "cyan"

[log]
  time = false

[misc]
  clean_on_exit = false

[screen]
  clear_on_rebuild = false
EOF

# Create tmp directory
RUN mkdir -p tmp

# Change ownership to developer
RUN chown -R developer:developer /app

# Switch to non-root user
USER developer

# Expose port
EXPOSE 8080

# Set environment variables
ENV GO_ENV=development
ENV CGO_ENABLED=0
ENV GOOS=linux

# Run with hot reload
CMD ["air", "-c", ".air.toml"]
